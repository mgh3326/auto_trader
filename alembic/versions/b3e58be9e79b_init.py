"""init

Revision ID: b3e58be9e79b
Revises: 
Create Date: 2025-08-15 00:37:06.461992

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b3e58be9e79b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exchanges',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('code', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('country', sa.Text(), nullable=True),
    sa.Column('tz', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_exchanges')),
    sa.UniqueConstraint('code', name=op.f('uq_exchanges_code'))
    )
    op.create_table('prompt_results',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('prompt', sa.Text(), nullable=False),
    sa.Column('result', sa.Text(), nullable=False),
    sa.Column('symbol', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('instrument_type', sa.Enum('equity_kr', 'equity_us', 'crypto', 'forex', 'index', name='instrument_type'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default='now()', nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default='now()', nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_prompt_results'))
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('nickname', sa.Text(), nullable=True),
    sa.Column('tz', sa.Text(), nullable=False),
    sa.Column('base_currency', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default='now()', nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email'))
    )
    op.create_table('instruments',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('exchange_id', sa.BigInteger(), nullable=True),
    sa.Column('symbol', sa.Text(), nullable=False),
    sa.Column('full_symbol', sa.Text(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('type', sa.Enum('equity_kr', 'equity_us', 'crypto', 'forex', 'index', name='instrument_type'), nullable=False),
    sa.Column('base_currency', sa.Text(), nullable=False),
    sa.Column('tick_size', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchanges.id'], name=op.f('fk_instruments_exchange_id_exchanges')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_instruments'))
    )
    op.create_table('user_channels',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('channel', sa.Enum('telegram', 'email', 'webhook', name='notify_channel'), nullable=False),
    sa.Column('handle', sa.Text(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_channels_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_channels'))
    )
    op.create_table('user_watch_items',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('instrument_id', sa.BigInteger(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('desired_buy_px', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('target_sell_px', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('stop_loss_px', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=18, scale=6), nullable=True),
    sa.Column('use_trailing', sa.Boolean(), nullable=False),
    sa.Column('trailing_gap_pct', sa.Numeric(precision=9, scale=4), nullable=True),
    sa.Column('notify_cooldown', sa.Interval(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default='now()', nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default='now()', nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], name=op.f('fk_user_watch_items_instrument_id_instruments')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_watch_items_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_watch_items'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_watch_items')
    op.drop_table('user_channels')
    op.drop_table('instruments')
    op.drop_table('users')
    op.drop_table('prompt_results')
    op.drop_table('exchanges')
    # ### end Alembic commands ###
