name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with test
        poetry run pip install pytest-cov
    
    - name: Install dependencies (cached)
      if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
      run: |
        poetry install --with test
        poetry run pip install pytest-cov
    
    - name: Set environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "KIS_APP_KEY=DUMMY_KIS_APP_KEY" >> $GITHUB_ENV
        echo "KIS_APP_SECRET=DUMMY_KIS_APP_SECRET" >> $GITHUB_ENV
        echo "TELEGRAM_TOKEN=DUMMY_TELEGRAM_TOKEN" >> $GITHUB_ENV
        echo "GOOGLE_API_KEY=DUMMY_GOOGLE_API_KEY" >> $GITHUB_ENV
        echo "GOOGLE_API_KEYS=[\"DUMMY_GOOGLE_API_KEY_1\", \"DUMMY_GOOGLE_API_KEY_2\"]" >> $GITHUB_ENV
        echo "OPENDART_API_KEY=DUMMY_OPENDART_API_KEY" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run tests
      run: |
        poetry run pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports to GitHub
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with test
        poetry run pip install flake8 black isort mypy

    - name: Run linting
      run: |
#        poetry run flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        poetry run black --check app/ tests/
        poetry run isort --check-only app/ tests/
        poetry run mypy app/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with test
        poetry run pip install bandit safety

    - name: Run security checks
      run: |
        poetry run bandit -r app/ -f json -o bandit-report.json || true
        poetry run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json