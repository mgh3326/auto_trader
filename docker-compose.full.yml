services:
  db:
    image: postgres:17
    container_name: auto_trader_pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auto_trader
    ports: [ "5432:5432" ]
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d auto_trader" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - local_dev

  redis:
    image: redis:latest
    container_name: auto_trader_redis
    ports: [ "6379:6379" ]
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - local_dev

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: auto_trader_api
    ports: [ "8001:8000" ]
    env_file:
      - .env
    volumes:
      - ./tmp:/app/tmp  # 토큰 캐시 영속성
      - ./logs:/app/logs  # 로그 파일 (선택적)
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - local_dev
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',8000)); print('ok')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: auto_trader_worker
    command: bash -lc "poetry run celery -A app.core.celery_app.celery_app worker --loglevel=INFO"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - local_dev

  adminer:
    image: adminer
    container_name: adminer
    ports: [ "8080:8080" ]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - local_dev

volumes:
  pg_data:
  redis_data:

networks:
  local_dev:
    driver: bridge


